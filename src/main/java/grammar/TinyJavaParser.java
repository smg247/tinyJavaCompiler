
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package grammar;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ScannerBuffer;
import java_cup.runtime.Symbol;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class TinyJavaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Token.class;
}

  /** Default constructor. */
  @Deprecated
  public TinyJavaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public TinyJavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TinyJavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\003\000\002\002\004\000\002\003" +
    "\010\000\002\004\003\000\002\004\004\000\002\006\003" +
    "\000\002\006\003\000\002\005\010\000\002\007\013\000" +
    "\002\007\012\000\002\007\017\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\003\000\002\012\005\000\002\013\004" +
    "\000\002\014\004\000\002\015\004\000\002\015\003\000" +
    "\002\016\007\000\002\017\004\000\002\017\003\000\002" +
    "\020\004\000\002\020\003\000\002\021\006\000\002\021" +
    "\007\000\002\021\011\000\002\021\007\000\002\021\004" +
    "\000\002\021\005\000\002\021\003\000\002\021\003\000" +
    "\002\022\005\000\002\022\004\000\002\023\006\000\002" +
    "\023\005\000\002\024\005\000\002\024\003\000\002\025" +
    "\003\000\002\025\005\000\002\026\003\000\002\026\005" +
    "\000\002\026\005\000\002\026\003\000\002\027\003\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\030\003\000\002\030\005\000\002\030" +
    "\005\000\002\031\003\000\002\031\005\000\002\031\005" +
    "\000\002\032\003\000\002\032\004\000\002\032\004\000" +
    "\002\032\006\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\005\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\004\010\006\001\002\000\004\002\226\001" +
    "\002\000\004\002\001\001\002\000\004\012\007\001\002" +
    "\000\004\016\010\001\002\000\004\044\011\001\002\000" +
    "\010\003\015\010\020\011\014\001\002\000\012\003\015" +
    "\010\020\011\014\045\ufffe\001\002\000\012\003\ufffb\010" +
    "\ufffb\011\ufffb\045\ufffb\001\002\000\010\013\034\014\041" +
    "\015\201\001\002\000\012\003\ufff6\010\ufff6\011\ufff6\045" +
    "\ufff6\001\002\000\012\003\ufffc\010\ufffc\011\ufffc\045\ufffc" +
    "\001\002\000\004\045\176\001\002\000\004\011\021\001" +
    "\002\000\004\015\022\001\002\000\004\016\023\001\002" +
    "\000\004\043\024\001\002\000\004\016\025\001\002\000" +
    "\004\041\026\001\002\000\004\040\027\001\002\000\004" +
    "\016\030\001\002\000\004\042\031\001\002\000\004\044" +
    "\032\001\002\000\024\003\uffbc\004\uffbc\006\uffbc\007\uffbc" +
    "\013\034\014\041\016\uffbc\027\uffbc\044\uffbc\001\002\000" +
    "\004\045\175\001\002\000\006\016\ufff4\042\ufff4\001\002" +
    "\000\020\003\061\004\056\006\053\007\064\016\063\027" +
    "\062\044\052\001\002\000\004\016\043\001\002\000\020" +
    "\003\uffec\004\uffec\006\uffec\007\uffec\016\uffec\027\uffec\044" +
    "\uffec\001\002\000\024\003\uffbc\004\uffbc\006\uffbc\007\uffbc" +
    "\013\034\014\041\016\uffbc\027\uffbc\044\uffbc\001\002\000" +
    "\006\016\ufff5\042\ufff5\001\002\000\020\003\uffed\004\uffed" +
    "\006\uffed\007\uffed\016\uffed\027\uffed\044\uffed\001\002\000" +
    "\004\022\044\001\002\000\010\017\045\020\047\021\050" +
    "\001\002\000\034\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\042\uffbf\001\002\000\004\027\051\001\002\000" +
    "\034\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\042" +
    "\uffbe\001\002\000\034\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\042\uffbd\001\002\000\024\003\uffeb\004\uffeb" +
    "\006\uffeb\007\uffeb\013\uffeb\014\uffeb\016\uffeb\027\uffeb\044" +
    "\uffeb\001\002\000\020\003\061\004\056\006\053\016\063" +
    "\027\062\044\052\045\uffbc\001\002\000\004\043\164\001" +
    "\002\000\004\027\163\001\002\000\004\043\154\001\002" +
    "\000\004\043\146\001\002\000\020\003\061\004\056\006" +
    "\053\007\064\016\063\027\062\044\052\001\002\000\004" +
    "\045\uffee\001\002\000\024\003\uffdf\004\uffdf\005\uffdf\006" +
    "\uffdf\007\uffdf\016\uffdf\027\uffdf\044\uffdf\045\uffdf\001\002" +
    "\000\024\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\016" +
    "\uffe0\027\uffe0\044\uffe0\045\uffe0\001\002\000\010\022\142" +
    "\031\132\043\uffd9\001\002\000\024\003\101\016\073\017" +
    "\045\020\047\021\050\023\070\024\100\027\067\043\071" +
    "\001\002\000\004\045\uffe9\001\002\000\034\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\042\uffc7\001\002\000" +
    "\004\045\uffdd\001\002\000\020\016\073\017\045\020\047" +
    "\021\050\023\070\024\100\043\071\001\002\000\026\003" +
    "\101\013\034\014\041\016\073\017\045\020\047\021\050" +
    "\023\070\024\100\043\071\001\002\000\034\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\042\uffc1\001\002\000" +
    "\040\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\132\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\042\uffc2\043\uffd9\001\002\000\034\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\042\uffca\001\002\000\004" +
    "\027\131\001\002\000\030\023\116\024\120\027\uffd2\030" +
    "\uffd2\032\uffd2\033\uffd2\034\121\035\122\036\117\037\115" +
    "\042\uffd2\001\002\000\014\027\uffd6\030\uffd6\032\111\033" +
    "\112\042\uffd6\001\002\000\020\016\073\017\045\020\047" +
    "\021\050\023\070\024\100\043\071\001\002\000\010\027" +
    "\uffd3\030\uffd3\042\uffd3\001\002\000\034\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\042\uffc3\001\002\000\034" +
    "\023\uffcd\024\uffcd\025\105\026\104\027\uffcd\030\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\042\uffcd" +
    "\001\002\000\020\016\073\017\045\020\047\021\050\023" +
    "\070\024\100\043\071\001\002\000\020\016\073\017\045" +
    "\020\047\021\050\023\070\024\100\043\071\001\002\000" +
    "\034\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\042" +
    "\uffc9\001\002\000\034\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\042\uffc8\001\002\000\034\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\042\uffc5\001\002\000\020" +
    "\016\073\017\045\020\047\021\050\023\070\024\100\043" +
    "\071\001\002\000\020\016\073\017\045\020\047\021\050" +
    "\023\070\024\100\043\071\001\002\000\010\027\uffd4\030" +
    "\uffd4\042\uffd4\001\002\000\010\027\uffd5\030\uffd5\042\uffd5" +
    "\001\002\000\020\016\073\017\045\020\047\021\050\023" +
    "\070\024\100\043\071\001\002\000\020\016\073\017\045" +
    "\020\047\021\050\023\070\024\100\043\071\001\002\000" +
    "\020\016\073\017\045\020\047\021\050\023\070\024\100" +
    "\043\071\001\002\000\020\016\073\017\045\020\047\021" +
    "\050\023\070\024\100\043\071\001\002\000\020\016\073" +
    "\017\045\020\047\021\050\023\070\024\100\043\071\001" +
    "\002\000\020\016\073\017\045\020\047\021\050\023\070" +
    "\024\100\043\071\001\002\000\020\023\116\024\120\027" +
    "\uffce\030\uffce\032\uffce\033\uffce\042\uffce\001\002\000\020" +
    "\023\116\024\120\027\uffcf\030\uffcf\032\uffcf\033\uffcf\042" +
    "\uffcf\001\002\000\034\023\uffcb\024\uffcb\025\105\026\104" +
    "\027\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\042\uffcb\001\002\000\020\023\116\024\120" +
    "\027\uffd0\030\uffd0\032\uffd0\033\uffd0\042\uffd0\001\002\000" +
    "\034\023\uffcc\024\uffcc\025\105\026\104\027\uffcc\030\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\042" +
    "\uffcc\001\002\000\020\023\116\024\120\027\uffd1\030\uffd1" +
    "\032\uffd1\033\uffd1\042\uffd1\001\002\000\004\045\uffde\001" +
    "\002\000\004\016\133\001\002\000\004\043\uffda\001\002" +
    "\000\004\042\137\001\002\000\004\042\136\001\002\000" +
    "\034\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\042" +
    "\uffc0\001\002\000\020\016\073\017\045\020\047\021\050" +
    "\023\070\024\100\043\071\001\002\000\034\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\042\uffc4\001\002\000" +
    "\034\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\042" +
    "\uffc6\001\002\000\022\003\101\016\073\017\045\020\047" +
    "\021\050\023\070\024\100\043\071\001\002\000\004\027" +
    "\144\001\002\000\024\003\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\016\uffe6\027\uffe6\044\uffe6\045\uffe6\001\002\000" +
    "\004\045\uffea\001\002\000\022\003\101\016\073\017\045" +
    "\020\047\021\050\023\070\024\100\043\071\001\002\000" +
    "\004\042\150\001\002\000\016\003\061\004\056\006\053" +
    "\016\063\027\062\044\052\001\002\000\024\003\uffe5\004" +
    "\uffe5\005\152\006\uffe5\007\uffe5\016\uffe5\027\uffe5\044\uffe5" +
    "\045\uffe5\001\002\000\016\003\061\004\056\006\053\016" +
    "\063\027\062\044\052\001\002\000\024\003\uffe4\004\uffe4" +
    "\005\uffe4\006\uffe4\007\uffe4\016\uffe4\027\uffe4\044\uffe4\045" +
    "\uffe4\001\002\000\024\003\101\016\073\017\045\020\047" +
    "\021\050\023\070\024\100\042\156\043\071\001\002\000" +
    "\006\030\161\042\uffd8\001\002\000\034\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\042\uffdb\001\002\000\004" +
    "\042\160\001\002\000\034\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\042\uffdc\001\002\000\022\003\101\016" +
    "\073\017\045\020\047\021\050\023\070\024\100\043\071" +
    "\001\002\000\004\042\uffd7\001\002\000\024\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\016\uffe2\027\uffe2\044\uffe2" +
    "\045\uffe2\001\002\000\022\003\101\016\073\017\045\020" +
    "\047\021\050\023\070\024\100\043\071\001\002\000\004" +
    "\042\166\001\002\000\016\003\061\004\056\006\053\016" +
    "\063\027\062\044\052\001\002\000\024\003\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\016\uffe3\027\uffe3\044\uffe3\045" +
    "\uffe3\001\002\000\004\045\uffe7\001\002\000\020\003\061" +
    "\004\056\006\053\016\063\027\062\044\052\045\uffbc\001" +
    "\002\000\004\045\173\001\002\000\024\003\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\016\uffe1\027\uffe1\044\uffe1\045" +
    "\uffe1\001\002\000\004\045\uffe8\001\002\000\012\003\ufff7" +
    "\010\ufff7\011\ufff7\045\ufff7\001\002\000\004\002\uffff\001" +
    "\002\000\004\016\ufff3\001\002\000\004\016\202\001\002" +
    "\000\004\016\ufff2\001\002\000\006\022\203\043\204\001" +
    "\002\000\010\017\045\020\047\021\050\001\002\000\010" +
    "\013\034\014\041\042\210\001\002\000\006\030\221\042" +
    "\ufff1\001\002\000\004\016\220\001\002\000\004\042\214" +
    "\001\002\000\004\044\211\001\002\000\024\003\uffbc\004" +
    "\uffbc\006\uffbc\007\uffbc\013\034\014\041\016\uffbc\027\uffbc" +
    "\044\uffbc\001\002\000\004\045\213\001\002\000\012\003" +
    "\ufff8\010\ufff8\011\ufff8\045\ufff8\001\002\000\004\044\215" +
    "\001\002\000\024\003\uffbc\004\uffbc\006\uffbc\007\uffbc\013" +
    "\034\014\041\016\uffbc\027\uffbc\044\uffbc\001\002\000\004" +
    "\045\217\001\002\000\012\003\ufff9\010\ufff9\011\ufff9\045" +
    "\ufff9\001\002\000\006\030\uffef\042\uffef\001\002\000\006" +
    "\013\034\014\041\001\002\000\004\042\ufff0\001\002\000" +
    "\004\027\224\001\002\000\012\003\ufffa\010\ufffa\011\ufffa" +
    "\045\ufffa\001\002\000\004\045\ufffd\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\016\005\015\006\011\007" +
    "\012\001\001\000\012\004\224\005\015\006\011\007\012" +
    "\001\001\000\002\001\001\000\006\010\176\011\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\035\014\032\015\034\016\037\035\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\057\021\056\022\064\023\053\024\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\035\015\041\016" +
    "\037\035\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\171\021\170\023\053\024" +
    "\054\035\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\144\021" +
    "\056\022\064\023\053\024\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\023\071\024\054\026\074\027\076\030\075\031\102" +
    "\032\073\033\065\034\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\023\071\024\054" +
    "\032\140\033\065\034\101\001\001\000\026\010\133\023" +
    "\071\024\054\026\134\027\076\030\075\031\102\032\073" +
    "\033\065\034\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\023\071\024\054\032\107\033" +
    "\065\034\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\023\071\024\054\032\106\033" +
    "\065\034\101\001\001\000\014\023\071\024\054\032\105" +
    "\033\065\034\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\023\071\024\054\027\113" +
    "\030\075\031\102\032\073\033\065\034\101\001\001\000" +
    "\022\023\071\024\054\027\112\030\075\031\102\032\073" +
    "\033\065\034\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\023\071\024\054\030\127\031\102\032\073" +
    "\033\065\034\101\001\001\000\016\023\071\024\054\031" +
    "\126\032\073\033\065\034\101\001\001\000\020\023\071" +
    "\024\054\030\125\031\102\032\073\033\065\034\101\001" +
    "\001\000\016\023\071\024\054\031\124\032\073\033\065" +
    "\034\101\001\001\000\020\023\071\024\054\030\123\031" +
    "\102\032\073\033\065\034\101\001\001\000\020\023\071" +
    "\024\054\030\122\031\102\032\073\033\065\034\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\023" +
    "\071\024\054\032\137\033\065\034\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\023\071\024\054\026" +
    "\142\027\076\030\075\031\102\032\073\033\065\034\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\023\071\024\054\026\146\027\076\030\075" +
    "\031\102\032\073\033\065\034\101\001\001\000\002\001" +
    "\001\000\010\021\150\023\053\024\054\001\001\000\002" +
    "\001\001\000\010\021\152\023\053\024\054\001\001\000" +
    "\002\001\001\000\026\023\071\024\054\025\156\026\154" +
    "\027\076\030\075\031\102\032\073\033\065\034\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\023\071\024\054\025\161\026" +
    "\154\027\076\030\075\031\102\032\073\033\065\034\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\023" +
    "\071\024\054\026\164\027\076\030\075\031\102\032\073" +
    "\033\065\034\101\001\001\000\002\001\001\000\010\021" +
    "\166\023\053\024\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\173\021\170\023\053\024\054\035" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\222\001\001\000\010\010\205\012\206\013" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\035\014\211\015" +
    "\034\016\037\035\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\035\014\215\015" +
    "\034\016\037\035\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\205\012\221\013" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TinyJavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TinyJavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TinyJavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private static int errorCount = 0;

    public TinyJavaParser(TinyJavaLexer lexer, ComplexSymbolFactory symbolFactory) {
        super(lexer, symbolFactory);
    }

    public static void main(String[] args) throws Exception {
        String inputFileName = args[0];
        ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
        ScannerBuffer tinyJavaLexer = new ScannerBuffer(new TinyJavaLexer(new BufferedReader(new FileReader(inputFileName)), symbolFactory));
        TinyJavaParser tinyJavaParser = new TinyJavaParser(tinyJavaLexer, symbolFactory);
        Symbol symbol = tinyJavaParser.parse();
    }

    public void report_error(String message, Object info) {
        if (info instanceof ComplexSymbolFactory.ComplexSymbol) {
          errorCount++;
          ComplexSymbolFactory.ComplexSymbol symbol = (ComplexSymbolFactory.ComplexSymbol) info;
          String symbolName = symbol.value != null ? symbol.value.toString() : symbol.getName();
          System.out.println("Encountered error number: " + errorCount + " <" + message + "> " + ": found <" + symbolName + "> on line " + symbol.getLeft().getLine() + " at column " + symbol.getLeft().getColumn());
        } else {
          throw new RuntimeException("We have an error that we aren't familiar with");
        }
    }

    public void report_fatal_error(String message, Object info) {
            report_error(message, info);
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$TinyJavaParser$actions {
  private final TinyJavaParser parser;

  /** Constructor */
  CUP$TinyJavaParser$actions(TinyJavaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TinyJavaParser$do_action_part00000000(
    int                        CUP$TinyJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$TinyJavaParser$parser,
    java.util.Stack            CUP$TinyJavaParser$stack,
    int                        CUP$TinyJavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TinyJavaParser$result;

      /* select the action based on the action number */
      switch (CUP$TinyJavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // tiny_java_program ::= class_decl 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("tiny_java_program",0, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= tiny_java_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)).value;
		RESULT = start_val;
              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TinyJavaParser$parser.done_parsing();
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_decl ::= PUBLIC CLASS IDENTIFIER LEFT_CURLY_BRACE member_decl_list RIGHT_CURLY_BRACE 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("class_decl",1, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // member_decl_list ::= member_decl 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("member_decl_list",2, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // member_decl_list ::= member_decl member_decl_list 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("member_decl_list",2, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // member_decl ::= field_decl 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("member_decl",4, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // member_decl ::= method_decl 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("member_decl",4, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_decl ::= STATIC return_type IDENTIFIER EQUALS literal SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("field_decl",3, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_decl ::= STATIC return_type IDENTIFIER LEFT_PAREN formal_param_list RIGHT_PAREN LEFT_CURLY_BRACE method_body RIGHT_CURLY_BRACE 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl",5, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-8)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_decl ::= STATIC return_type IDENTIFIER LEFT_PAREN RIGHT_PAREN LEFT_CURLY_BRACE method_body RIGHT_CURLY_BRACE 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl",5, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-7)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_decl ::= PUBLIC STATIC VOID IDENTIFIER LEFT_PAREN IDENTIFIER LEFT_BRACKET RIGHT_BRACKET IDENTIFIER RIGHT_PAREN LEFT_CURLY_BRACE method_body RIGHT_CURLY_BRACE 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl",5, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-12)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_decl ::= error 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("method_decl",5, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= INT 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // return_type ::= type 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("return_type",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // return_type ::= VOID 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("return_type",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal_param_list ::= formal_param 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("formal_param_list",8, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formal_param_list ::= formal_param COMMA formal_param_list 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("formal_param_list",8, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formal_param ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("formal_param",9, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_body ::= local_decl_list method_statement_list 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("method_body",10, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // local_decl_list ::= local_decl local_decl_list 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("local_decl_list",11, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // local_decl_list ::= empty 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("local_decl_list",11, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // local_decl ::= type IDENTIFIER EQUALS literal SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("local_decl",12, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method_statement_list ::= statement method_statement_list 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("method_statement_list",13, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // method_statement_list ::= return_statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("method_statement_list",13, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement_list ::= statement statement_list 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement_list",14, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement_list ::= empty 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement_list",14, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= IDENTIFIER EQUALS expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= IF LEFT_PAREN expression RIGHT_PAREN statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= WHILE LEFT_PAREN expression RIGHT_PAREN statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= method_invocation SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= LEFT_CURLY_BRACE statement_list RIGHT_CURLY_BRACE 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= error 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_statement ::= RETURN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("return_statement",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_statement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("return_statement",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_invocation ::= qualified_name LEFT_PAREN argument_list RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("method_invocation",17, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_invocation ::= qualified_name LEFT_PAREN RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("method_invocation",17, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // qualified_name ::= IDENTIFIER PERIOD IDENTIFIER 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("qualified_name",18, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // qualified_name ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("qualified_name",18, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argument_list ::= expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("argument_list",19, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // argument_list ::= expression COMMA argument_list 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("argument_list",19, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= relational_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= relational_expression DOUBLE_EQUALS relational_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= relational_expression NOT_EQUALS relational_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= error 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relational_expression ::= additive_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relational_expression",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relational_expression ::= additive_expression LESS_THAN additive_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relational_expression",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relational_expression ::= additive_expression GREATER_THAN additive_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relational_expression",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // relational_expression ::= additive_expression LESS_THAN_EQUALS additive_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relational_expression",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relational_expression ::= additive_expression GREATER_THAN_EQUALS additive_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("relational_expression",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // additive_expression ::= multiplicative_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("additive_expression",22, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("additive_expression",22, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("additive_expression",22, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // multiplicative_expression ::= unary_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",23, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // multiplicative_expression ::= multiplicative_expression TIMES unary_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",23, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // multiplicative_expression ::= multiplicative_expression DIVIDE unary_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",23, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unary_expression ::= primary_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unary_expression ::= PLUS unary_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unary_expression ::= MINUS unary_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unary_expression ::= LEFT_PAREN type RIGHT_PAREN unary_expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("unary_expression",24, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // primary_expression ::= literal 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("primary_expression",25, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // primary_expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("primary_expression",25, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // primary_expression ::= method_invocation 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("primary_expression",25, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // primary_expression ::= LEFT_PAREN expression RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("primary_expression",25, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.elementAt(CUP$TinyJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal ::= DECIMAL_INTEGER 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal ::= FLOATING_POINT 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // empty ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParser$result = parser.getSymbolFactory().newSymbol("empty",27, ((java_cup.runtime.Symbol)CUP$TinyJavaParser$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TinyJavaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TinyJavaParser$do_action(
    int                        CUP$TinyJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$TinyJavaParser$parser,
    java.util.Stack            CUP$TinyJavaParser$stack,
    int                        CUP$TinyJavaParser$top)
    throws java.lang.Exception
    {
              return CUP$TinyJavaParser$do_action_part00000000(
                               CUP$TinyJavaParser$act_num,
                               CUP$TinyJavaParser$parser,
                               CUP$TinyJavaParser$stack,
                               CUP$TinyJavaParser$top);
    }
}

}
